name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      confirm_deploy:
        description: '确认部署到生产环境'
        required: true
        default: 'false'
        type: boolean

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  IMAGE_NAME: pollux1314/image-preview-app

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Set image tag output
      run: echo "image-tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # 登录到阿里云容器镜像服务
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.ALIYUN_USERNAME }} --password-stdin || echo "Failed to login to Aliyun"
          
          # 停止并删除旧容器（如果存在）
          docker stop image-preview-app || echo "Container not running"
          docker rm image-preview-app || echo "Container not found"
          
          # 拉取最新镜像
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "Failed to pull image"
          
          # 启动新容器
          docker run -d \
            --name image-preview-app \
            --restart unless-stopped \
            -p 18080:18080 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "Failed to start container"
          
          # 检查容器状态
          docker ps | grep image-preview-app || echo "Container not running"
          
          # 清理旧镜像
          docker image prune -f
          
          echo "Deployment completed successfully!"

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 